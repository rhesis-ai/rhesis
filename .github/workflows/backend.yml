name: "[Deploy] Backend"

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/backend/**'
      - '.github/workflows/backend.yml'
      - 'sdk/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
          - prd
      deploy_only:
        description: 'Skip build and only deploy latest image'
        required: false
        default: false
        type: boolean
      reason:
        description: 'Reason for manual deployment'
        required: false
        type: string
        default: 'Manual deployment'
      preview:
        description: 'Deploy as preview (tagged URL, no live traffic)'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      deploy_only:
        description: 'Skip build and only deploy latest image'
        required: false
        default: false
        type: boolean
      reason:
        description: 'Reason for manual deployment'
        required: false
        type: string
        default: 'Manual deployment'
      preview:
        description: 'Deploy as preview (tagged URL, no live traffic)'
        required: false
        default: false
        type: boolean
      backend_preview_url_override:
        description: 'Override backend URL for preview deployments'
        required: false
        type: string
    outputs:
      backend_preview_url_encoded:
        description: 'The backend preview URL if deployed as preview (base64 encoded)'
        value: ${{ jobs.deploy.outputs.backend_preview_url_encoded }}
      deployed_url_encoded:
        description: 'The deployed service URL (base64 encoded)'
        value: ${{ jobs.deploy.outputs.deployed_url_encoded }}

env:
  SA_KEY_PATH: 'gcp-sa-key.json'

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate environment parameter
        uses: ./.github/actions/validate-environment
        with:
          environment: ${{ github.event.inputs.environment }}

  build:
    needs: validate-inputs
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: ${{ inputs.environment || github.event.inputs.environment || 'dev' }}

    env:
      ENVIRONMENT: ${{ inputs.environment || github.event.inputs.environment || 'dev' }}
      SERVICE: backend

    outputs:
      image_name: ${{ steps.set_env.outputs.image_name }}
      service_name: ${{ steps.set_env.outputs.service_name }}
      environment: ${{ env.ENVIRONMENT }}
      commit_sha: ${{ steps.set_env.outputs.commit_sha }}
      is_preview: ${{ steps.set_env.outputs.is_preview }}

    steps:
      - uses: actions/checkout@v4

      - name: Create and validate service account key file
        id: sa_key
        run: |
          # Write the key to a file, ensuring it's properly quoted
          echo '${{ secrets.GCP_SA_KEY }}' > ${{ env.SA_KEY_PATH }}

          # Validate that the file contains valid JSON
          if ! jq . ${{ env.SA_KEY_PATH }} > /dev/null 2>&1; then
            echo "‚ùå Error: Service account key is not valid JSON"
            echo "First few characters:"
            head -c 20 ${{ env.SA_KEY_PATH }}
            exit 1
          fi

          echo "‚úÖ Service account key validated as proper JSON"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(realpath ${{ env.SA_KEY_PATH }})" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set environment variables
        id: set_env
        run: |
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> $GITHUB_ENV
          echo "REGION=${{ secrets.REGION || secrets.TF_VAR_REGION || 'us-central1' }}" >> $GITHUB_ENV

          # Get commit SHA (short version for URLs)
          COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          # Check if this is a preview deployment
          if [ "${{ inputs.preview }}" = "true" ] || [ "${{ github.event.inputs.preview }}" = "true" ]; then
            IS_PREVIEW="true"
          else
            IS_PREVIEW="false"
          fi
          echo "IS_PREVIEW=$IS_PREVIEW" >> $GITHUB_ENV
          echo "is_preview=$IS_PREVIEW" >> $GITHUB_OUTPUT
          echo "üîç Preview deployment mode: $IS_PREVIEW"

      - name: Setup service environment
        uses: ./.github/actions/setup-service-env
        with:
          environment: ${{ env.ENVIRONMENT }}
          service-type: backend
          project-id: ${{ secrets.PROJECT_ID }}

      - name: Set additional environment variables
        run: |
          echo "CLOUDSQL_INSTANCE=${{ secrets.CLOUDSQL_INSTANCE }}" >> $GITHUB_ENV

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker

      - name: Build Container
        run: |
          # Build without cache to ensure all migration files are always up-to-date
          if [ "${{ env.IS_PREVIEW }}" = "true" ]; then
            # For preview deployments, tag with commit SHA
            docker build --no-cache --pull -t ${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }} -f apps/backend/Dockerfile .
            echo "Built preview image: ${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}"
          else
            # For regular deployments, use latest tag
            docker build --no-cache --pull -t ${{ env.IMAGE_NAME }}:latest -f apps/backend/Dockerfile .
            echo "Built regular image: ${{ env.IMAGE_NAME }}:latest"
          fi

      - name: Push Container
        run: |
          if [ "${{ env.IS_PREVIEW }}" = "true" ]; then
            # For preview deployments, push commit SHA tagged image
            docker push ${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}
            echo "Pushed preview image: ${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}"
          else
            # For regular deployments, push latest tagged image
            docker push ${{ env.IMAGE_NAME }}:latest
            echo "Pushed regular image: ${{ env.IMAGE_NAME }}:latest"
          fi

  migrate:
    needs: [validate-inputs, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: ${{ needs.build.outputs.environment || inputs.environment || github.event.inputs.environment }}

    env:
      ENVIRONMENT: ${{ needs.build.outputs.environment || inputs.environment || github.event.inputs.environment }}
      COMMIT_SHA: ${{ needs.build.outputs.commit_sha }}
      IS_PREVIEW: ${{ needs.build.outputs.is_preview }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create and validate service account key file
        id: sa_key
        run: |
          # Write the key to a file, ensuring it's properly quoted
          echo '${{ secrets.GCP_SA_KEY }}' > ${{ env.SA_KEY_PATH }}

          # Validate that the file contains valid JSON
          if ! jq . ${{ env.SA_KEY_PATH }} > /dev/null 2>&1; then
            echo "‚ùå Error: Service account key is not valid JSON"
            echo "First few characters:"
            head -c 20 ${{ env.SA_KEY_PATH }}
            exit 1
          fi

          echo "‚úÖ Service account key validated as proper JSON"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(realpath ${{ env.SA_KEY_PATH }})" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set environment variables
        run: |
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> $GITHUB_ENV
          REGION="${{ secrets.REGION || secrets.TF_VAR_REGION || 'us-central1' }}"
          echo "REGION=$REGION" >> $GITHUB_ENV

      - name: Setup service environment
        uses: ./.github/actions/setup-service-env
        with:
          environment: ${{ env.ENVIRONMENT }}
          service-type: backend
          project-id: ${{ secrets.PROJECT_ID }}

      - name: Set additional environment variables
        run: |
          echo "CLOUDSQL_INSTANCE=${{ secrets.CLOUDSQL_INSTANCE }}" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          echo "üóÉÔ∏è Running database migrations..."

          # Determine which image to use based on preview mode
          if [ "${{ env.IS_PREVIEW }}" = "true" ]; then
            IMAGE_TAG="${{ env.COMMIT_SHA }}"
          else
            IMAGE_TAG="latest"
          fi

          echo "Using image: ${{ env.IMAGE_NAME }}:$IMAGE_TAG"

          # Create a unique job name for this migration run
          MIGRATION_JOB_NAME="backend-migrate-$(date +%s)"

          echo "Creating Cloud Run Job: $MIGRATION_JOB_NAME"

          # Create a Cloud Run Job to run migrations (executes once)
          gcloud run jobs create $MIGRATION_JOB_NAME \
            --image=${{ env.IMAGE_NAME }}:$IMAGE_TAG \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.REGION }} \
            --vpc-connector=redis-connector${{ env.REGION == 'europe-west3' && '-eu' || '' }} \
            --vpc-egress=private-ranges-only \
            --max-retries=0 \
            --task-timeout=10m \
            --memory=1Gi \
            --cpu=1 \
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.CLOUDSQL_INSTANCE }} \
            --set-env-vars="SQLALCHEMY_DB_DRIVER=${{ secrets.SQLALCHEMY_DB_DRIVER }},SQLALCHEMY_DB_USER=${{ secrets.SQLALCHEMY_DB_USER }},SQLALCHEMY_DB_PASS=${{ secrets.SQLALCHEMY_DB_PASS }},SQLALCHEMY_DB_HOST=${{ secrets.SQLALCHEMY_DB_HOST }},SQLALCHEMY_DB_NAME=${{ secrets.SQLALCHEMY_DB_NAME }}" \
            --args=bash,-c,./migrate.sh

          echo "‚úÖ Migration job created"

          # Execute the migration job
          echo "üöÄ Executing migration job..."
          gcloud run jobs execute $MIGRATION_JOB_NAME \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.REGION }} \
            --wait

          MIGRATION_EXIT_CODE=$?

          # Clean up the job after execution
          echo "üßπ Cleaning up migration job..."
          gcloud run jobs delete $MIGRATION_JOB_NAME \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.REGION }} \
            --quiet

          if [ $MIGRATION_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Migration failed with exit code $MIGRATION_EXIT_CODE"
            exit $MIGRATION_EXIT_CODE
          fi

          echo "‚úÖ Database migrations completed successfully"

  deploy:
    needs: [validate-inputs, build, migrate]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: ${{ needs.build.outputs.environment || inputs.environment || github.event.inputs.environment }}

    env:
      ENVIRONMENT: ${{ needs.build.outputs.environment || inputs.environment || github.event.inputs.environment }}
      COMMIT_SHA: ${{ needs.build.outputs.commit_sha }}
      IS_PREVIEW: ${{ needs.build.outputs.is_preview }}

    outputs:
      backend_preview_url_encoded: ${{ steps.output_url.outputs.backend_preview_url_encoded }}
      deployed_url_encoded: ${{ steps.output_url.outputs.deployed_url_encoded }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create and validate service account key file
        id: sa_key
        run: |
          # Write the key to a file, ensuring it's properly quoted
          echo '${{ secrets.GCP_SA_KEY }}' > ${{ env.SA_KEY_PATH }}

          # Validate that the file contains valid JSON
          if ! jq . ${{ env.SA_KEY_PATH }} > /dev/null 2>&1; then
            echo "‚ùå Error: Service account key is not valid JSON"
            echo "First few characters:"
            head -c 20 ${{ env.SA_KEY_PATH }}
            exit 1
          fi

          echo "‚úÖ Service account key validated as proper JSON"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(realpath ${{ env.SA_KEY_PATH }})" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set environment variables
        run: |
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> $GITHUB_ENV
          REGION="${{ secrets.REGION || secrets.TF_VAR_REGION || 'us-central1' }}"
          echo "REGION=$REGION" >> $GITHUB_ENV

      - name: Setup service environment
        uses: ./.github/actions/setup-service-env
        with:
          environment: ${{ env.ENVIRONMENT }}
          service-type: backend
          project-id: ${{ secrets.PROJECT_ID }}

      - name: Set additional environment variables
        run: |
          echo "CLOUDSQL_INSTANCE=${{ secrets.CLOUDSQL_INSTANCE }}" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          if [ "${{ env.IS_PREVIEW }}" = "true" ]; then
            # Preview deployment with commit SHA
            IMAGE_TAG="${{ env.COMMIT_SHA }}"
            echo "üöÄ Deploying preview revision with commit SHA: $IMAGE_TAG"
            echo "Image: ${{ env.IMAGE_NAME }}:$IMAGE_TAG"

            # Generate the Cloud Run URL for this preview (or use override)
            if [ -n "${{ inputs.backend_preview_url_override }}" ]; then
              PREVIEW_CLOUD_RUN_URL="${{ inputs.backend_preview_url_override }}"
              echo "üîó Using provided backend URL override: $PREVIEW_CLOUD_RUN_URL"
            else
              # We'll set this after the service is tagged with the correct URL
              PREVIEW_CLOUD_RUN_URL="PLACEHOLDER_WILL_BE_SET_AFTER_TAGGING"
              echo "üåê Preview URL will be fetched after deployment and tagging"
            fi

            gcloud run deploy ${{ env.SERVICE_NAME }} \
              --image=${{ env.IMAGE_NAME }}:$IMAGE_TAG \
              --project=${{ env.PROJECT_ID }} \
              --vpc-connector=redis-connector${{ env.REGION == 'europe-west3' && '-eu' || '' }} \
              --vpc-egress=private-ranges-only \
              --region=${{ env.REGION }} \
              --platform=managed \
              --allow-unauthenticated \
              --no-traffic \
              --revision-suffix=${{ env.COMMIT_SHA }} \
              --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.CLOUDSQL_INSTANCE }} \
              --set-env-vars="$(cat <<EOF
          SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }},
          SQLALCHEMY_DB_MODE=${{ secrets.SQLALCHEMY_DB_MODE }},
          SQLALCHEMY_DB_DRIVER=${{ secrets.SQLALCHEMY_DB_DRIVER }},
          SQLALCHEMY_DB_USER=${{ secrets.SQLALCHEMY_DB_USER }},
          SQLALCHEMY_DB_PASS=${{ secrets.SQLALCHEMY_DB_PASS }},
          SQLALCHEMY_DB_HOST=${{ secrets.SQLALCHEMY_DB_HOST }},
          SQLALCHEMY_DB_NAME=${{ secrets.SQLALCHEMY_DB_NAME }},
          DB_ENCRYPTION_KEY=${{ secrets.DB_ENCRYPTION_KEY }},
          LOG_LEVEL=${{ secrets.LOG_LEVEL }},
          AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }},
          AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }},
          AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }},
          AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }},
          AUTH0_SECRET_KEY=${{ secrets.AUTH0_SECRET_KEY }},
          DEMO_USER_EMAIL=${{ secrets.DEMO_USER_EMAIL }},
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }},
          JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }},
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }},
          FRONTEND_URL=${{ secrets.FRONTEND_URL }},
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }},
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }},
          AZURE_OPENAI_DEPLOYMENT_NAME=${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }},
          AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }},
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},
          GEMINI_MODEL_NAME=${{ secrets.GEMINI_MODEL_NAME }},
          DEFAULT_GENERATION_MODEL=${{ secrets.DEFAULT_GENERATION_MODEL }},
          DEFAULT_MODEL_NAME=${{ secrets.DEFAULT_MODEL_NAME }},
          GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }},
          VERTEX_AI_LOCATION=${{ secrets.VERTEX_AI_LOCATION }},
          VERTEX_AI_PROJECT=${{ secrets.VERTEX_AI_PROJECT }},
          CHATBOT_API_KEY=${{ secrets.CHATBOT_API_KEY }},
          RHESIS_BASE_URL=$PREVIEW_CLOUD_RUN_URL,
          BACKEND_URL=$PREVIEW_CLOUD_RUN_URL,
          BACKEND_ENV=${{ secrets.BACKEND_ENV }},
          SMTP_HOST=${{ secrets.SMTP_HOST }},
          SMTP_PORT=${{ secrets.SMTP_PORT }},
          SMTP_USER=${{ secrets.SMTP_USER }},
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }},
          FROM_EMAIL=${{ secrets.FROM_EMAIL }},
          AGENT_EMAIL_BCC=${{ secrets.AGENT_EMAIL_BCC }},
          WELCOME_CALENDAR_LINK=${{ secrets.WELCOME_CALENDAR_LINK }},
          WELCOME_FROM_EMAIL=${{ secrets.WELCOME_FROM_EMAIL }},
          BROKER_URL=${{ secrets.BROKER_URL }},
          CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }},
          STORAGE_SERVICE_URI=${{ secrets.STORAGE_SERVICE_URI }},
          STORAGE_SERVICE_ACCOUNT_KEY=${{ secrets.STORAGE_SERVICE_ACCOUNT_KEY }},
          LOCAL_STORAGE_PATH=${{ secrets.LOCAL_STORAGE_PATH }},
          SKIP_MIGRATIONS=true
          EOF
          )"

            echo "‚úÖ Preview revision deployed successfully"
          else
            # Regular deployment with latest tag
            echo "üöÄ Deploying regular revision"
            echo "Image: ${{ env.IMAGE_NAME }}:latest"
            echo "Using Cloud SQL instance: ${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.CLOUDSQL_INSTANCE }}"

            gcloud run deploy ${{ env.SERVICE_NAME }} \
              --image=${{ env.IMAGE_NAME }}:latest \
              --project=${{ env.PROJECT_ID }} \
              --vpc-connector=redis-connector${{ env.REGION == 'europe-west3' && '-eu' || '' }} \
              --vpc-egress=private-ranges-only \
              --region=${{ env.REGION }} \
              --platform=managed \
              --allow-unauthenticated \
              --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.CLOUDSQL_INSTANCE }} \
              --set-env-vars="$(cat <<EOF
          SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }},
          SQLALCHEMY_DB_MODE=${{ secrets.SQLALCHEMY_DB_MODE }},
          SQLALCHEMY_DB_DRIVER=${{ secrets.SQLALCHEMY_DB_DRIVER }},
          SQLALCHEMY_DB_USER=${{ secrets.SQLALCHEMY_DB_USER }},
          SQLALCHEMY_DB_PASS=${{ secrets.SQLALCHEMY_DB_PASS }},
          SQLALCHEMY_DB_HOST=${{ secrets.SQLALCHEMY_DB_HOST }},
          SQLALCHEMY_DB_NAME=${{ secrets.SQLALCHEMY_DB_NAME }},
          DB_ENCRYPTION_KEY=${{ secrets.DB_ENCRYPTION_KEY }},
          LOG_LEVEL=${{ secrets.LOG_LEVEL }},
          AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }},
          AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }},
          AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }},
          AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }},
          AUTH0_SECRET_KEY=${{ secrets.AUTH0_SECRET_KEY }},
          DEMO_USER_EMAIL=${{ secrets.DEMO_USER_EMAIL }},
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }},
          JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }},
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }},
          FRONTEND_URL=${{ secrets.FRONTEND_URL }},
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }},
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }},
          AZURE_OPENAI_DEPLOYMENT_NAME=${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }},
          AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }},
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},
          GEMINI_MODEL_NAME=${{ secrets.GEMINI_MODEL_NAME }},
          DEFAULT_GENERATION_MODEL=${{ secrets.DEFAULT_GENERATION_MODEL }},
          DEFAULT_MODEL_NAME=${{ secrets.DEFAULT_MODEL_NAME }},
          GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }},
          VERTEX_AI_LOCATION=${{ secrets.VERTEX_AI_LOCATION }},
          VERTEX_AI_PROJECT=${{ secrets.VERTEX_AI_PROJECT }},
          CHATBOT_API_KEY=${{ secrets.CHATBOT_API_KEY }},
          RHESIS_BASE_URL=${{ secrets.RHESIS_BASE_URL }},
          BACKEND_URL=${{ secrets.BACKEND_URL }},
          BACKEND_ENV=${{ secrets.BACKEND_ENV }},
          SMTP_HOST=${{ secrets.SMTP_HOST }},
          SMTP_PORT=${{ secrets.SMTP_PORT }},
          SMTP_USER=${{ secrets.SMTP_USER }},
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }},
          FROM_EMAIL=${{ secrets.FROM_EMAIL }},
          AGENT_EMAIL_BCC=${{ secrets.AGENT_EMAIL_BCC }},
          WELCOME_CALENDAR_LINK=${{ secrets.WELCOME_CALENDAR_LINK }},
          WELCOME_FROM_EMAIL=${{ secrets.WELCOME_FROM_EMAIL }},
          BROKER_URL=${{ secrets.BROKER_URL }},
          CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }},
          STORAGE_SERVICE_URI=${{ secrets.STORAGE_SERVICE_URI }},
          STORAGE_SERVICE_ACCOUNT_KEY=${{ secrets.STORAGE_SERVICE_ACCOUNT_KEY }},
          LOCAL_STORAGE_PATH=${{ secrets.LOCAL_STORAGE_PATH }},
          SKIP_MIGRATIONS=true
          EOF
          )"

            echo "‚úÖ Regular deployment completed successfully"

            # For regular deployments, ensure the new revision gets 100% traffic
            echo "üö¶ Setting new revision to receive 100% traffic..."
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --to-latest \
              --project=${{ env.PROJECT_ID }} \
              --region=${{ env.REGION }}

            echo "‚úÖ Traffic successfully routed to new revision"
          fi

      - name: Tag revision for commit-specific URL
        if: env.IS_PREVIEW == 'true'
        run: |
          echo "Creating tag for commit-specific URL"

          # Get the latest revision (the one we just created)
          echo "üîç Getting latest revision for service: ${{ env.SERVICE_NAME }}"
          LATEST_REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} \
            --format="value(metadata.name)" \
            --limit=1)

          echo "Latest revision: $LATEST_REVISION"

          # Validate revision was found
          if [ -z "$LATEST_REVISION" ]; then
            echo "‚ùå Error: No latest revision found!"
            echo "üîç Available revisions:"
            gcloud run revisions list --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }} --limit=5
            exit 1
          fi

          # Clean up obfuscated output for better readability
          CLEAN_REVISION=$(echo "$LATEST_REVISION" | sed 's/\*\*\*/rhesis/g')
          if [ "$CLEAN_REVISION" != "$LATEST_REVISION" ]; then
            echo "üìã Cleaned revision name: $CLEAN_REVISION"
          fi

          # Create a valid tag name (lowercase, alphanumeric + hyphens only)
          # Use GitHub actor (username) for more user-friendly URLs
          GITHUB_USER="${{ github.actor }}"
          GITHUB_USER=$(echo "$GITHUB_USER" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          TAG_NAME="$GITHUB_USER-${{ env.COMMIT_SHA }}"
          TAG_NAME=$(echo "$TAG_NAME" | tr '[:upper:]' '[:lower:]')
          echo "Using tag name: $TAG_NAME (user: ${{ github.actor }})"

          # Tag the latest revision and set it to 0% traffic in a single command
          echo "Tagging revision with 0% traffic allocation..."
          echo "üîç Debug tagging parameters:"
          echo "  - SERVICE_NAME: ${{ env.SERVICE_NAME }}"
          echo "  - LATEST_REVISION: $LATEST_REVISION"
          echo "  - TAG_NAME: $TAG_NAME"
          echo "  - PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "  - REGION: ${{ env.REGION }}"

          TRAFFIC_OUTPUT=$(gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --to-revisions="$LATEST_REVISION=0" \
            --set-tags "$TAG_NAME=$LATEST_REVISION" \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.REGION }} 2>&1)

          TRAFFIC_EXIT_CODE=$?
          echo "üîç Traffic update exit code: $TRAFFIC_EXIT_CODE"

          # Display cleaned output
          echo "$TRAFFIC_OUTPUT" | sed 's/\*\*\*/rhesis/g'

          if [ $TRAFFIC_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Traffic update failed!"
            exit 1
          fi

          # Get the actual commit-specific URL from Cloud Run (includes random suffix)
          echo "Fetching tagged URL from Cloud Run..."

          # Use a more reliable method to extract the tagged URL
          # First try with jq (more reliable)
          PREVIEW_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.REGION }} \
            --format="json" | jq -r --arg tag "$TAG_NAME" '.status.traffic[] | select(.tag == $tag) | .url' 2>/dev/null || echo "")

          # Validate that we got a URL
          if [ -z "$PREVIEW_URL" ] || [ "$PREVIEW_URL" = "null" ]; then
            echo "Warning: Could not fetch tagged URL, retrying..."
            sleep 5
            PREVIEW_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
              --project=${{ env.PROJECT_ID }} \
              --region=${{ env.REGION }} \
              --format="json" | jq -r --arg tag "$TAG_NAME" '.status.traffic[] | select(.tag == $tag) | .url')
          fi

          if [ -z "$PREVIEW_URL" ] || [ "$PREVIEW_URL" = "null" ]; then
            echo "Error: Failed to get preview URL after retry"
            echo "Debug: Available traffic entries:"
            gcloud run services describe ${{ env.SERVICE_NAME }} \
              --project=${{ env.PROJECT_ID }} \
              --region=${{ env.REGION }} \
              --format="json" | jq -r '.status.traffic[] | "Tag: \(.tag // "none"), URL: \(.url)"'
            exit 1
          fi

          echo "Preview URL created: $PREVIEW_URL"

          # Output for use in other steps or jobs
          echo "PREVIEW_URL=$PREVIEW_URL" >> $GITHUB_ENV

          # Now redeploy with the correct environment variables
          echo "Updating service with correct preview URL in environment variables..."

          # Create a unique revision suffix to avoid conflicts
          TIMESTAMP=$(date +%s)
          REVISION_SUFFIX="${{ env.COMMIT_SHA }}-${TIMESTAMP: -4}"
          echo "Using revision suffix: $REVISION_SUFFIX"

          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }} \
            --project=${{ env.PROJECT_ID }} \
            --vpc-connector=redis-connector${{ env.REGION == 'europe-west3' && '-eu' || '' }} \
            --vpc-egress=private-ranges-only \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8000 \
            --memory=2Gi \
            --cpu=2 \
            --concurrency=80 \
            --timeout=3600 \
            --max-instances=10 \
            --min-instances=1 \
            --no-traffic \
            --revision-suffix=$REVISION_SUFFIX \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.CLOUDSQL_INSTANCE }} \
            --set-env-vars="$(cat <<EOF
          PROJECT_ID=${{ env.PROJECT_ID }},
          ENVIRONMENT=${{ env.ENVIRONMENT }},
          SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }},
          SQLALCHEMY_DB_MODE=${{ secrets.SQLALCHEMY_DB_MODE }},
          SQLALCHEMY_DB_DRIVER=${{ secrets.SQLALCHEMY_DB_DRIVER }},
          SQLALCHEMY_DB_USER=${{ secrets.SQLALCHEMY_DB_USER }},
          SQLALCHEMY_DB_PASS=${{ secrets.SQLALCHEMY_DB_PASS }},
          SQLALCHEMY_DB_HOST=${{ secrets.SQLALCHEMY_DB_HOST }},
          SQLALCHEMY_DB_NAME=${{ secrets.SQLALCHEMY_DB_NAME }},
          DB_ENCRYPTION_KEY=${{ secrets.DB_ENCRYPTION_KEY }},
          LOG_LEVEL=${{ secrets.LOG_LEVEL }},
          AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }},
          AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }},
          AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }},
          AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }},
          AUTH0_SECRET_KEY=${{ secrets.AUTH0_SECRET_KEY }},
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }},
          JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }},
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }},
          FRONTEND_URL=${{ secrets.FRONTEND_URL }},
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }},
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }},
          AZURE_OPENAI_DEPLOYMENT_NAME=${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }},
          AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }},
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},
          GEMINI_MODEL_NAME=${{ secrets.GEMINI_MODEL_NAME }},
          DEFAULT_GENERATION_MODEL=${{ secrets.DEFAULT_GENERATION_MODEL }},
          DEFAULT_MODEL_NAME=${{ secrets.DEFAULT_MODEL_NAME }},
          GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }},
          VERTEX_AI_LOCATION=${{ secrets.VERTEX_AI_LOCATION }},
          VERTEX_AI_PROJECT=${{ secrets.VERTEX_AI_PROJECT }},
          CHATBOT_API_KEY=${{ secrets.CHATBOT_API_KEY }},
          RHESIS_BASE_URL=PLACEHOLDER_WILL_BE_SET_AFTER_TAGGING,
          BACKEND_URL=PLACEHOLDER_WILL_BE_SET_AFTER_TAGGING,
          BACKEND_ENV=${{ secrets.BACKEND_ENV }},
          SMTP_HOST=${{ secrets.SMTP_HOST }},
          SMTP_PORT=${{ secrets.SMTP_PORT }},
          SMTP_USER=${{ secrets.SMTP_USER }},
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }},
          FROM_EMAIL=${{ secrets.FROM_EMAIL }},
          AGENT_EMAIL_BCC=${{ secrets.AGENT_EMAIL_BCC }},
          WELCOME_CALENDAR_LINK=${{ secrets.WELCOME_CALENDAR_LINK }},
          WELCOME_FROM_EMAIL=${{ secrets.WELCOME_FROM_EMAIL }},
          BROKER_URL=${{ secrets.BROKER_URL }},
          CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }},
          STORAGE_SERVICE_URI=${{ secrets.STORAGE_SERVICE_URI }},
          STORAGE_SERVICE_ACCOUNT_KEY=${{ secrets.STORAGE_SERVICE_ACCOUNT_KEY }},
          LOCAL_STORAGE_PATH=${{ secrets.LOCAL_STORAGE_PATH }},
          SKIP_MIGRATIONS=true
          EOF
          )"

          # Deploy a final revision with the actual preview URL and update the tag
          echo "üîÑ Deploying final backend revision with actual preview URL..."
          FINAL_REVISION_SUFFIX="${{ env.COMMIT_SHA }}-final"
          echo "üöÄ Deploying final revision: $FINAL_REVISION_SUFFIX"

          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }} \
            --project=${{ env.PROJECT_ID }} \
            --vpc-connector=redis-connector${{ env.REGION == 'europe-west3' && '-eu' || '' }} \
            --vpc-egress=private-ranges-only \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8000 \
            --memory=2Gi \
            --cpu=2 \
            --concurrency=80 \
            --timeout=3600 \
            --max-instances=10 \
            --min-instances=1 \
            --no-traffic \
            --revision-suffix=$FINAL_REVISION_SUFFIX \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.CLOUDSQL_INSTANCE }} \
            --set-env-vars="$(cat <<EOF
          PROJECT_ID=${{ env.PROJECT_ID }},
          ENVIRONMENT=${{ env.ENVIRONMENT }},
          SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }},
          SQLALCHEMY_DB_MODE=${{ secrets.SQLALCHEMY_DB_MODE }},
          SQLALCHEMY_DB_DRIVER=${{ secrets.SQLALCHEMY_DB_DRIVER }},
          SQLALCHEMY_DB_USER=${{ secrets.SQLALCHEMY_DB_USER }},
          SQLALCHEMY_DB_PASS=${{ secrets.SQLALCHEMY_DB_PASS }},
          SQLALCHEMY_DB_HOST=${{ secrets.SQLALCHEMY_DB_HOST }},
          SQLALCHEMY_DB_NAME=${{ secrets.SQLALCHEMY_DB_NAME }},
          DB_ENCRYPTION_KEY=${{ secrets.DB_ENCRYPTION_KEY }},
          LOG_LEVEL=${{ secrets.LOG_LEVEL }},
          AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }},
          AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }},
          AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }},
          AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }},
          AUTH0_SECRET_KEY=${{ secrets.AUTH0_SECRET_KEY }},
          DEMO_USER_EMAIL=${{ secrets.DEMO_USER_EMAIL }},
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }},
          JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }},
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }},
          FRONTEND_URL=${{ secrets.FRONTEND_URL }},
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }},
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }},
          AZURE_OPENAI_DEPLOYMENT_NAME=${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }},
          AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }},
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},
          GEMINI_MODEL_NAME=${{ secrets.GEMINI_MODEL_NAME }},
          DEFAULT_GENERATION_MODEL=${{ secrets.DEFAULT_GENERATION_MODEL }},
          DEFAULT_MODEL_NAME=${{ secrets.DEFAULT_MODEL_NAME }},
          GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }},
          VERTEX_AI_LOCATION=${{ secrets.VERTEX_AI_LOCATION }},
          VERTEX_AI_PROJECT=${{ secrets.VERTEX_AI_PROJECT }},
          CHATBOT_API_KEY=${{ secrets.CHATBOT_API_KEY }},
          RHESIS_BASE_URL=$PREVIEW_URL,
          BACKEND_URL=$PREVIEW_URL,
          BACKEND_ENV=${{ secrets.BACKEND_ENV }},
          SMTP_HOST=${{ secrets.SMTP_HOST }},
          SMTP_PORT=${{ secrets.SMTP_PORT }},
          SMTP_USER=${{ secrets.SMTP_USER }},
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }},
          FROM_EMAIL=${{ secrets.FROM_EMAIL }},
          AGENT_EMAIL_BCC=${{ secrets.AGENT_EMAIL_BCC }},
          WELCOME_CALENDAR_LINK=${{ secrets.WELCOME_CALENDAR_LINK }},
          WELCOME_FROM_EMAIL=${{ secrets.WELCOME_FROM_EMAIL }},
          BROKER_URL=${{ secrets.BROKER_URL }},
          CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }},
          STORAGE_SERVICE_URI=${{ secrets.STORAGE_SERVICE_URI }},
          STORAGE_SERVICE_ACCOUNT_KEY=${{ secrets.STORAGE_SERVICE_ACCOUNT_KEY }},
          LOCAL_STORAGE_PATH=${{ secrets.LOCAL_STORAGE_PATH }},
          SKIP_MIGRATIONS=true
          EOF
          )"

          # Update the tag to point to the final revision with correct environment variables
          FINAL_REVISION="${{ env.SERVICE_NAME }}-$FINAL_REVISION_SUFFIX"
          echo "üè∑Ô∏è Updating tag to point to final revision: $FINAL_REVISION"

          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --set-tags "$TAG_NAME=$FINAL_REVISION" \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.REGION }}

          echo "‚úÖ Backend service updated with correct preview URL in environment variables"

      - name: Output deployed service URL
        id: output_service_url
        run: |
          echo "üîç Determining service URL (IS_PREVIEW=${{ env.IS_PREVIEW }})"
          if [ "${{ env.IS_PREVIEW }}" = "true" ]; then
            # For preview deployments, use the URL that was fetched from Cloud Run
            DEPLOYED_URL="${{ env.PREVIEW_URL }}"
            echo "üìç Using preview URL: $DEPLOYED_URL"
          else
            # For regular deployments, get the standard service URL from Cloud Run
            DEPLOYED_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
              --project=${{ env.PROJECT_ID }} \
              --region=${{ env.REGION }} \
              --format="value(status.url)")
            echo "üìç Using standard service URL: $DEPLOYED_URL"
          fi

          # Debug: Show URL structure to identify masking issues
          echo "üîç URL Debug Info:"
          echo "  - URL length: ${#DEPLOYED_URL}"
          echo "  - URL starts with: ${DEPLOYED_URL:0:20}..."
          echo "  - URL ends with: ...${DEPLOYED_URL: -20}"

          # Set as output for potential use in other workflows and steps
          echo "DEPLOYED_URL=$DEPLOYED_URL" >> $GITHUB_ENV
          echo "deployed_service_url=$DEPLOYED_URL" >> $GITHUB_OUTPUT

      - name: Set actual service name
        id: set_service_name
        run: |
          # Use repository variable to construct service name (avoids obfuscation)
          SERVICE_TYPE="backend"
          if [ "${{ env.ENVIRONMENT }}" = "prd" ]; then
            ACTUAL_SERVICE_NAME="${{ vars.APP_NAME }}-${SERVICE_TYPE}"
          else
            ACTUAL_SERVICE_NAME="${{ vars.APP_NAME }}-${SERVICE_TYPE}-${{ env.ENVIRONMENT }}"
          fi

          echo "‚úÖ Service name: $ACTUAL_SERVICE_NAME"
          echo "ACTUAL_SERVICE_NAME=$ACTUAL_SERVICE_NAME" >> $GITHUB_ENV

      - name: Generate deployment summary
        uses: ./.github/actions/generate-deployment-summary
        with:
          service-type: Backend
          is-preview: ${{ env.IS_PREVIEW }}
          environment: ${{ env.ENVIRONMENT }}
          env-display: ${{ env.ENV_DISPLAY }}
          service-url: ${{ env.IS_PREVIEW == 'true' && env.DEPLOYED_URL || '' }}
          actual-service-name: ${{ env.ACTUAL_SERVICE_NAME }}

      - name: Set Workflow Outputs
        id: output_url
        run: |
          echo "üîç Debug workflow outputs:"
          echo "  - IS_PREVIEW: ${{ env.IS_PREVIEW }}"
          echo "  - PREVIEW_URL: '${{ env.PREVIEW_URL }}'"
          echo "  - DEPLOYED_URL: '${{ env.DEPLOYED_URL }}'"

          if [ "${{ env.IS_PREVIEW }}" = "true" ]; then
            BACKEND_PREVIEW_URL="${{ env.PREVIEW_URL }}"
            DEPLOYED_URL="$BACKEND_PREVIEW_URL"
            echo "  - Setting backend_preview_url: '$BACKEND_PREVIEW_URL'"

            # Validate that we have a valid URL before setting output
            if [ -n "$BACKEND_PREVIEW_URL" ] && [ "$BACKEND_PREVIEW_URL" != "null" ]; then
              # Encode URL to avoid GitHub secret detection
              URL_ENCODED=$(echo "$BACKEND_PREVIEW_URL" | base64 -w 0)
              echo "backend_preview_url_encoded=$URL_ENCODED" >> $GITHUB_OUTPUT
              echo "deployed_url_encoded=$URL_ENCODED" >> $GITHUB_OUTPUT
              echo "  - ‚úÖ Backend preview URL encoded and set successfully"
            else
              echo "  - ‚ùå ERROR: Backend preview URL is empty or null!"
              echo "  - PREVIEW_URL from env: '${{ env.PREVIEW_URL }}'"
              exit 1
            fi
          else
            DEPLOYED_URL="${{ env.DEPLOYED_URL }}"
            echo "  - Setting backend_preview_url: (empty for non-preview)"
            # Encode URL to avoid GitHub secret detection
            URL_ENCODED=$(echo "$DEPLOYED_URL" | base64 -w 0)
            echo "deployed_url_encoded=$URL_ENCODED" >> $GITHUB_OUTPUT
            echo "backend_preview_url_encoded=" >> $GITHUB_OUTPUT
          fi
