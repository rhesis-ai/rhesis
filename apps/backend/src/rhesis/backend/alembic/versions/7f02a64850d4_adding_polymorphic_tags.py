from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

import rhesis.backend

# revision identifiers, used by Alembic.
revision: str = "7f02a64850d4"
down_revision: Union[str, None] = "56932b4a1a2c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tag",
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("icon_unicode", sa.String(), nullable=True),
        sa.Column(
            "id",
            rhesis.backend.app.models.guid.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.TIMESTAMP(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_tag_id"), "tag", ["id"], unique=True)
    op.create_table(
        "tagged_item",
        sa.Column("tag_id", rhesis.backend.app.models.guid.GUID(), nullable=False),
        sa.Column("entity_id", rhesis.backend.app.models.guid.GUID(), nullable=False),
        sa.Column("entity_type", sa.String(), nullable=False),
        sa.Column(
            "id",
            rhesis.backend.app.models.guid.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.TIMESTAMP(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_tagged_item_id"), "tagged_item", ["id"], unique=True)
    op.drop_column("prompt", "tags")
    op.drop_column("prompt_template", "tags")
    op.drop_column("test_set", "tags")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "test_set",
        sa.Column("tags", postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    )
    op.add_column(
        "prompt_template",
        sa.Column("tags", postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    )
    op.add_column(
        "prompt",
        sa.Column("tags", postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    )
    op.drop_index(op.f("ix_tagged_item_id"), table_name="tagged_item")
    op.drop_table("tagged_item")
    op.drop_index(op.f("ix_tag_id"), table_name="tag")
    op.drop_table("tag")
    # ### end Alembic commands ###
