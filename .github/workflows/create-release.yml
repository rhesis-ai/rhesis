name: "[Release] 2. Create and deploy (stg)"

on:
  workflow_dispatch:  # Allows manual triggering
  schedule:
    # The time is in UTC.
    # 6:50 UTC = 08:50 CEST.
    # 7:50 UTC = 08:50 CET.
    # Need to be adjusted after the time change to CEST or CET.
    # The workflow is scheduled not to be on the full hour, because full hours are busy
    # for GitHub Actions and delays can be expected.
    - cron: '50 7 * * 4'


jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    steps:

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.RHEO_APP_ID }}
          private-key: ${{ secrets.RHEO_APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Set up Git
        run: |
            git config user.name "rheo-app[bot]"
            git config user.email "237771051+rheo-app[bot]@users.noreply.github.com"


      - name: Check release config
        id: check-config
        run: |
          if [ ! -f "release_config.json" ]; then
            echo "Error: release_config.json not found"
            exit 1
          fi
          echo "release_config.json found"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv for SDK
        uses: astral-sh/setup-uv@v6
        with:
            version: latest

      - name: Run release script
        run: |
          python3 .github/release --bump-config-file release_config.json
          uv lock --project ./apps/backend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run Prettier to format frontend code
        working-directory: apps/frontend
        run: |
          npx --yes prettier@^3 --version
          npx --yes prettier@^3 --write .

      - name: Commit changes
        run: |
          rm -rf release_config.json
          git add .
          git commit -m "Prepare release"

      - name: Push release branch
        run: |
          git push origin $(git branch --show-current)

      - name: Create Pull Request
        run: |
          BRANCH_NAME=$(git branch --show-current)

          # Check if version changes JSON file exists
          if [ ! -f "/tmp/version_changes.json" ]; then
            echo "Error: /tmp/version_changes.json not found. Cannot create PR without version changes."
            exit 1
          fi

          # Extract version changes dynamically
          VERSION_CHANGES=$(jq -r 'to_entries | map("\(.key): \(.value)") | join(", ")' /tmp/version_changes.json)

          # Create title with dynamic version changes
          PR_TITLE="Release: $VERSION_CHANGES"

          # Create body with dynamic version changes
          PR_BODY="This PR contains the automated release changes for:
          $(jq -r 'to_entries | map("- \(.key | ascii_upcase): \(.value)") | join("\n")' /tmp/version_changes.json)


          ## How the release process works
          1. The current pull request contains the version changes in the configuration files and changelogs
          2. Review the generated changelogs
          3. Check if the version changes are correct
          4. Check if the SDK and backend tests pass
          5. Give the team time for review and hotfixes. Hotfixes must be merged into the release branch.
          6. Once the release branch is approved, it can be merged into main.
          7. After the merge, you need to run the \"Release - 3. Publish and deploy (prd)\" workflow.  **The workflow must be run on the release branch.** The workflow will deploy the app to the production environment and upload the new version of the SDK to PyPI.



          ## Changes
          - Version files updated
          - Changelog updated
          - Release branch created

          "

          gh pr create --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head $BRANCH_NAME
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}

  backend-deploy:
    needs: release
    uses: ./.github/workflows/backend.yml
    with:
      environment: stg
      reason: "Release deployment to staging"
    secrets: inherit

  frontend-deploy:
    needs: release
    uses: ./.github/workflows/frontend.yml
    with:
      environment: stg
      reason: "Release deployment to staging"
    secrets: inherit

  worker-deploy:
    needs: release
    uses: ./.github/workflows/worker.yml
    with:
      environment: stg
      reason: "Release deployment to dev"
    secrets: inherit
