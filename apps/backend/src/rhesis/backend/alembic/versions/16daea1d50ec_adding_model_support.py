from alembic import op
import sqlalchemy as sa
from typing import Union, Sequence
import rhesis



# revision identifiers, used by Alembic.
revision: str = '16daea1d50ec'
down_revision: Union[str, None] = 'a7e1303a11da'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('icon', sa.String(), nullable=True),
    sa.Column('model_name', sa.String(), nullable=False),
    sa.Column('endpoint', sa.String(), nullable=False),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('request_headers', sa.JSON(), nullable=True),
    sa.Column('provider_type_id', rhesis.backend.app.models.guid.GUID(), nullable=True),
    sa.Column('status_id', rhesis.backend.app.models.guid.GUID(), nullable=True),
    sa.Column('owner_id', rhesis.backend.app.models.guid.GUID(), nullable=True),
    sa.Column('assignee_id', rhesis.backend.app.models.guid.GUID(), nullable=True),
    sa.Column('id', rhesis.backend.app.models.guid.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('nano_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('organization_id', rhesis.backend.app.models.guid.GUID(), nullable=True),
    sa.Column('user_id', rhesis.backend.app.models.guid.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['assignee_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['provider_type_id'], ['type_lookup.id'], ),
    sa.ForeignKeyConstraint(['status_id'], ['status.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_model_id'), 'model', ['id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_model_id'), table_name='model')
    op.drop_table('model')
    # ### end Alembic commands ###