# General Rules
- Always use the basedatagrid when using a grid.
- Do not use the regular grid, use stack instead. Grid is deprecated.

# Testing Rules

## Universal Testing Principles
- **Test knowledge available** - Comprehensive testing guidance available when requested
- **Follow AAA Pattern**: Arrange (setup) → Act (execute) → Assert (verify)
- **Use descriptive test names**: `test_<functionality>_<condition>_<expected_result>`
- **One assertion per concept** - Tests should verify one specific behavior
- **Keep tests independent** - Tests should not depend on execution order
- **Use appropriate pytest markers** to categorize tests:
  - `@pytest.mark.unit` - Fast, isolated, mocked dependencies
  - `@pytest.mark.integration` - Real services, databases, APIs
  - `@pytest.mark.slow` - Tests taking >5 seconds
  - `@pytest.mark.ai` - Tests involving AI models/APIs
  - `@pytest.mark.critical` - Core functionality tests
  - `@pytest.mark.security` - Security and vulnerability tests

## Test Development Flow
- **Create tests only when requested** - Only suggest/create tests when user explicitly asks
- **For bug fixes**: If user requests, suggest test-first approach to reproduce bugs
- **Testing guidance available**: Comprehensive patterns and examples ready when needed
- **Coverage suggestions**: Available when user asks about test coverage

## Test Directory Structure

**All tests live in the dedicated `tests/` directory**, organized by component with logical subdirectories:

```
tests/
├── backend/                    # Python/FastAPI backend tests
│   ├── conftest.py            # Backend-specific fixtures
│   ├── services/              # Service layer tests
│   │   ├── test_auth_service.py
│   │   ├── test_ai_service.py
│   │   └── test_prompt_service.py
│   ├── crud/                  # CRUD operation tests
│   │   ├── test_user_crud.py
│   │   ├── test_testset_crud.py
│   │   └── test_category_crud.py
│   ├── api/                   # API endpoint tests
│   │   ├── test_auth_endpoints.py
│   │   ├── test_testset_endpoints.py
│   │   └── test_admin_endpoints.py
│   ├── models/                # Database model tests
│   │   ├── test_user_model.py
│   │   └── test_testset_model.py
│   └── utils/                 # Utility function tests
│       ├── test_validation.py
│       └── test_helpers.py
├── frontend/                  # React/TypeScript frontend tests
│   ├── components/            # Component tests
│   │   ├── ui/               # UI component tests
│   │   ├── forms/            # Form component tests
│   │   └── layout/           # Layout component tests
│   ├── hooks/                # Custom hook tests
│   ├── services/             # Frontend service tests
│   ├── utils/                # Frontend utility tests
│   ├── integration/          # Integration tests
│   └── e2e/                  # End-to-end tests
├── sdk/                      # Python SDK tests
│   ├── client/               # SDK client tests
│   ├── entities/             # Entity model tests
│   ├── auth/                 # Authentication tests
│   └── integration/          # SDK integration tests
└── shared/                   # Shared test utilities
    ├── factories/            # Test data factories
    ├── fixtures/             # Common fixtures
    └── utils/                # Test helper functions
```

## Backend Testing (Python/FastAPI)

### Test Organization Rules
- **All backend tests**: Must be in `tests/backend/` directory
- **Organize by architecture layer**: `services/`, `crud/`, `api/`, `models/`, `utils/`
- **Use factories**: Create test data with factory functions, not hardcoded values
- **Async tests**: Always use `@pytest.mark.asyncio` for async functions
- **Database tests**: Use `@pytest.mark.database` + `@pytest.mark.integration`

### File Placement Guidelines
- **Service tests**: `tests/backend/services/test_{service_name}_service.py`
- **CRUD tests**: `tests/backend/crud/test_{model_name}_crud.py`
- **API tests**: `tests/backend/api/test_{feature}_endpoints.py`
- **Model tests**: `tests/backend/models/test_{model_name}_model.py`
- **Utility tests**: `tests/backend/utils/test_{utility_name}.py`

### FastAPI Testing Patterns
```python
# Always use FastAPI TestClient for API tests
@pytest.mark.integration
@pytest.mark.api
def test_endpoint_creates_resource(client):
    response = client.post("/api/v1/resource", json={"name": "test"})
    assert response.status_code == 201
    assert "id" in response.json()

# For async endpoints, use AsyncClient
@pytest.mark.asyncio
@pytest.mark.integration
async def test_async_endpoint(async_client):
    response = await async_client.post("/async-endpoint", json=data)
    assert response.status_code == 200
```

### Database Testing
- **Always use fixtures** for database setup: `test_db`, `clean_database`
- **Rollback transactions** in test teardown to keep tests isolated
- **Test constraints**: Verify unique constraints, foreign keys, etc.
- **Never use production database** - always use test-specific database

### Security Testing
- **Test authentication**: Verify endpoints require proper API keys
- **Test authorization**: Check role-based access controls
- **Test input validation**: Verify SQL injection protection, XSS prevention
- **API key redaction**: Ensure API keys never appear in logs

### AI Service Testing
- **Mock AI APIs** in unit tests: `@patch('openai.ChatCompletion.create')`
- **Use @pytest.mark.ai** for tests involving real AI APIs
- **Test error handling**: API timeouts, rate limits, invalid responses
- **Test prompt injection protection**: Verify malicious prompts are sanitized

## Frontend Testing (React/TypeScript)

### Test Organization Rules
- **All frontend tests**: Must be in `tests/frontend/` directory
- **Organize by feature/layer**: `components/`, `hooks/`, `services/`, `utils/`, `integration/`, `e2e/`
- **Component grouping**: Group related components in subdirectories (`ui/`, `forms/`, `layout/`)
- **Use Testing Library**: Always prefer `@testing-library/react`
- **User-centric testing**: Test what users see/do, not implementation details

### File Placement Guidelines

#### Frontend-Specific Naming (React/TypeScript)
- **UI components**: `tests/frontend/components/ui/{ComponentName}.test.tsx`
- **Form components**: `tests/frontend/components/forms/{FormName}.test.tsx`
- **Layout components**: `tests/frontend/components/layout/{LayoutName}.test.tsx`
- **Custom hooks**: `tests/frontend/hooks/use{HookName}.test.ts`
- **Frontend services**: `tests/frontend/services/{serviceName}.test.ts`
- **Utilities**: `tests/frontend/utils/{utilityName}.test.ts`
- **Integration tests**: `tests/frontend/integration/{feature}-integration.test.tsx`
- **E2E tests**: `tests/frontend/e2e/{feature}.spec.ts` (Playwright convention)

### Frontend Testing Framework Requirements
- **Test Framework**: Jest with jsdom environment
- **Component Testing**: React Testing Library (never Enzyme)
- **User Interactions**: @testing-library/user-event (never fireEvent for user actions)
- **API Mocking**: MSW (Mock Service Worker) at network level
- **E2E Testing**: Playwright (never Cypress for new tests)
- **Accessibility**: jest-axe for a11y testing
- **Setup File**: `tests/frontend/setup.ts` for global test configuration

### Component Testing Patterns
```typescript
// ✅ GOOD: Test user behavior, not implementation
test('button calls onClick when clicked', async () => {
  const user = userEvent.setup();
  const mockOnClick = jest.fn();
  
  render(<Button onClick={mockOnClick}>Click me</Button>);
  
  // Use semantic queries (getByRole, getByLabelText, getByText)
  await user.click(screen.getByRole('button', { name: /click me/i }));
  
  expect(mockOnClick).toHaveBeenCalledTimes(1);
});

// ✅ GOOD: Test loading and error states
test('shows loading spinner while submitting', async () => {
  const user = userEvent.setup();
  
  render(<LoginForm onSubmit={mockSubmit} />);
  
  await user.type(screen.getByLabelText(/email/i), 'test@example.com');
  await user.click(screen.getByRole('button', { name: /sign in/i }));
  
  expect(screen.getByLabelText(/loading/i)).toBeInTheDocument();
});

// ❌ BAD: Testing implementation details
test('sets state correctly', () => {
  const { getByTestId } = render(<Component />);
  expect(getByTestId('internal-state')).toHaveTextContent('initial');
});
```

### Hook Testing
- **Use renderHook**: From `@testing-library/react` for custom hooks
- **Provide context**: Wrap hooks with required providers (QueryClient, AuthProvider, etc.)
- **Test all states**: Loading, success, error states
- **Mock dependencies**: Mock API calls, not the hook internals

```typescript
// ✅ GOOD: Custom hook testing with providers
const createWrapper = () => {
  const queryClient = new QueryClient({
    defaultOptions: { queries: { retry: false } }
  });
  
  return ({ children }: { children: React.ReactNode }) => (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        {children}
      </AuthProvider>
    </QueryClientProvider>
  );
};

test('useTestSets fetches data successfully', async () => {
  // Mock API at network level with MSW
  server.use(
    rest.get('/api/test-sets', (req, res, ctx) => {
      return res(ctx.json([{ id: '1', name: 'Test Set' }]));
    })
  );

  const { result } = renderHook(() => useTestSets(), {
    wrapper: createWrapper(),
  });

  await waitFor(() => {
    expect(result.current.isSuccess).toBe(true);
  });
});
```

### API Mocking (MSW Required)
- **Always use MSW**: Mock Service Worker for API mocking in tests
- **Setup in setup.ts**: Configure MSW server globally
- **Mock at network level**: Never mock modules/functions for API calls
- **Test error scenarios**: 401s, 500s, network failures, timeouts

```typescript
// ✅ GOOD: MSW API mocking setup
// tests/frontend/mocks/handlers.ts
export const handlers = [
  rest.get('/api/test-sets', (req, res, ctx) => {
    return res(ctx.json([{ id: '1', name: 'Banking Tests' }]));
  }),
  
  rest.post('/api/test-sets', (req, res, ctx) => {
    return res(ctx.status(201), ctx.json({ id: 'new-id' }));
  }),
];

// tests/frontend/setup.ts
import { server } from './mocks/server';
beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());
```

### Accessibility Testing (Required for Components)
- **Use jest-axe**: `expect(await axe(container)).toHaveNoViolations()`
- **Test keyboard navigation**: Tab order, Enter/Space activation, focus management
- **Semantic queries**: Prefer `getByRole()`, `getByLabelText()` over `getByTestId()`
- **Screen reader friendly**: Test ARIA labels, descriptions, live regions

```typescript
// ✅ GOOD: Accessibility testing
import { axe, toHaveNoViolations } from 'jest-axe';
expect.extend(toHaveNoViolations);

test('component is accessible', async () => {
  const { container } = render(<TestSetCard testSet={mockData} />);
  const results = await axe(container);
  expect(results).toHaveNoViolations();
});

test('supports keyboard navigation', async () => {
  const user = userEvent.setup();
  render(<Button onClick={mockClick}>Save</Button>);
  
  await user.tab(); // Focus the button
  await user.keyboard('{Enter}'); // Activate with keyboard
  
  expect(mockClick).toHaveBeenCalled();
});
```

### E2E Testing (Playwright)
- **Use Playwright**: For full user journey tests (.spec.ts files)
- **Test critical paths**: User registration, core workflows, payment flows
- **Cross-browser testing**: Chrome, Firefox, Safari, Mobile
- **Page Object Model**: For complex E2E scenarios

## SDK Testing (Python)

### Test Organization Rules
- **All SDK tests**: Must be in `tests/sdk/` directory
- **Organize by functionality**: `client/`, `entities/`, `auth/`, `integration/`
- **Test public API**: Focus on what users of the SDK will use
- **Mock HTTP calls**: Use `requests-mock` or similar for HTTP testing

### File Placement Guidelines
- **Client tests**: `tests/sdk/client/test_{client_name}.py`
- **Entity tests**: `tests/sdk/entities/test_{entity_name}.py`
- **Authentication**: `tests/sdk/auth/test_{auth_feature}.py`
- **Integration tests**: `tests/sdk/integration/test_{feature}_integration.py`
- **Utilities**: `tests/sdk/utils/test_{utility_name}.py`

### HTTP Client Testing
```python
# Always mock HTTP calls for unit tests
@pytest.mark.unit
def test_sdk_handles_api_error():
    with requests_mock.Mocker() as m:
        m.get('https://api.rhesis.ai/test-sets', status_code=500)
        
        client = RhesisClient(api_key="test-key")
        result = client.get_test_sets()
        
        assert result.success is False
        assert "500" in result.error_message
```

### Integration Testing
- **Test against real API**: Use test API keys/environments
- **Test authentication flows**: API key validation, token refresh
- **Test retry logic**: Network timeouts, rate limiting
- **Test pagination**: Large result sets, cursor-based pagination

### Documentation Testing
- **Test code examples**: Ensure README examples actually work
- **Test docstrings**: Use doctest for simple examples
- **Version compatibility**: Test against supported Python versions

## API interactions

- If interacting with the backend API, always check the interfaces first under ./utils/api-client.
- Always look for other pages doing similar interactions with the API.
- Never use the name as the key in the Autocomplete component, always use the id.

## Chip Display in Form Fields

### For Single Chips (1 item):
- Use `TextField` with `InputAdornment` containing a single `Chip` component
- Keep it simple with `startAdornment: <Chip label={value} size="small" color="primary" />`

### For Multiple Chips (array of items):
- **Never use TextField** - it doesn't handle wrapping properly
- **Always use Autocomplete** with these exact props:
  ```jsx
  <Autocomplete
    multiple
    options={[]}
    value={arrayOfValues || []}
    readOnly
    disableCloseOnSelect
    disableClearable
    freeSolo
    renderTags={(value, getTagProps) => 
      value.map((option, index) => (
        <Chip
          {...getTagProps({ index })}
          key={option}
          label={option}
          size="small"
          color="primary"
          onDelete={undefined}
        />
      ))
    }
    renderInput={(params) => (
      <TextField
        {...params}
        label="Field Label"
        margin="normal"
        InputProps={{
          ...params.InputProps,
          readOnly: true,
        }}
        inputProps={{
          ...params.inputProps,
          style: { display: 'none' }  // Hide input field for display-only
        }}
      />
    )}
  />
  ```

### For Chip Overflow (showing "+x" for remaining items):
- Slice the array: `value.slice(0, maxCount)`
- Add overflow chip: `remainingCount > 0 ? [<Chip label={`+${remainingCount}`} variant="outlined" />] : []`
- Use `.concat()` to combine display chips with overflow chip

### Key Rules:
1. **Single chip = TextField + InputAdornment**
2. **Multiple chips = Autocomplete with hidden input**
3. **Always hide input field with `style: { display: 'none' }` for display-only**
4. **Never wrap chips in extra containers - let Autocomplete handle layout**
5. **Use `onDelete={undefined}` to remove delete buttons from chips**

## Test File Naming & Organization

### File Naming Conventions
- **Backend**: `test_{feature}_{layer}.py` (e.g., `test_user_service.py`, `test_auth_endpoints.py`)
- **Frontend**: `{ComponentName}.test.tsx` or `{moduleName}.test.ts` (Jest convention - no `test_` prefix)
- **E2E Frontend**: `{feature}.spec.ts` (Playwright convention)
- **SDK**: `test_{module_name}.py` (e.g., `test_rhesis_client.py`, `test_test_set_entity.py`)

### Directory Structure Rules
- **Centralized testing**: ALL tests must be in the `tests/` directory (never alongside source code)
- **Logical organization**: Organize tests by architectural layers and features within each component
- **Consistent structure**: Each component follows the same organizational pattern:
  - Core functionality tests in feature-specific subdirectories
  - Integration tests in dedicated `integration/` folders
  - Shared utilities and fixtures in appropriate locations
- **Shared resources**: 
  - Component-specific fixtures: `tests/{component}/conftest.py`
  - Cross-component utilities: `tests/shared/`
  - Test data factories: `tests/shared/factories/`

### Examples of Proper Organization
```
❌ BAD - Tests scattered with source code:
src/components/Button/Button.test.tsx
src/services/auth/auth.test.py

✅ GOOD - Centralized in tests/ directory:
tests/frontend/components/ui/test_Button.test.tsx
tests/backend/services/test_auth_service.py
```

## Testing Anti-Patterns (What NOT to Do)

### General Anti-Patterns
- ❌ **Don't test implementation details** - Test behavior, not internal methods
- ❌ **Don't write tests that duplicate code logic** - Tests should verify behavior, not repeat implementation
- ❌ **Don't use production data** in tests - Always use test data/mocks
- ❌ **Don't write flaky tests** - Tests should pass consistently
- ❌ **Don't skip test isolation** - Each test should be independent

### Backend Anti-Patterns
- ❌ **Don't use real external APIs** in unit tests - Mock them
- ❌ **Don't commit with failing tests** - All tests must pass
- ❌ **Don't test framework code** - Test your business logic, not FastAPI/SQLAlchemy
- ❌ **Don't use sleep() for timing** - Use proper async/await patterns

### Frontend Anti-Patterns
- ❌ **Don't use Enzyme** - Always use React Testing Library for component testing
- ❌ **Don't use fireEvent for user actions** - Use @testing-library/user-event instead
- ❌ **Don't test implementation details** - Test behavior, not internal state/methods
- ❌ **Don't use `getByTestId()` as first choice** - Prefer semantic queries (`getByRole`, `getByLabelText`)
- ❌ **Don't test CSS styling** - Test behavior and accessibility, not visual appearance
- ❌ **Don't mock React hooks unnecessarily** - Test the actual hook behavior
- ❌ **Don't mock at module level for API calls** - Use MSW to mock at network level
- ❌ **Don't test framework code** - Don't test React Router, React Query, etc. internals
- ❌ **Don't use act() manually** - React Testing Library handles this automatically
- ❌ **Don't test multiple concerns in one test** - Keep tests focused and isolated

## Quick Test Commands Reference

### Backend Commands
```bash
# Fast feedback loop
pytest tests/backend/ -m "unit and not slow" -v

# Run specific test categories
pytest tests/backend/ -m security -v
pytest tests/backend/ -m "integration and not ai" -v

# Run tests by layer/component
pytest tests/backend/services/ -v          # All service tests
pytest tests/backend/api/ -v              # All API endpoint tests
pytest tests/backend/crud/ -v             # All CRUD tests

# Coverage check
pytest tests/backend/ --cov=src/rhesis/backend --cov-report=term-missing

# Run tests matching pattern
pytest tests/backend/ -k "test_auth" -v
```

### Frontend Commands (Jest + Playwright)
```bash
# Jest Tests
npm test                                  # All Jest tests (components, hooks, etc.)
npm test -- --watch                      # Watch mode for development
npm test -- --coverage                   # Coverage report

# Run specific test types
npm test tests/frontend/components/       # All component tests
npm test tests/frontend/hooks/           # All custom hook tests
npm test tests/frontend/services/        # All frontend service tests

# Run specific component categories
npm test tests/frontend/components/ui/    # UI component tests only
npm test tests/frontend/components/forms/ # Form component tests only

# Run by pattern
npm test Button                          # All tests with "Button" in name
npm test -- --testNamePattern="accessibility" # Accessibility tests only

# Playwright E2E Tests
npx playwright test                      # All E2E tests
npx playwright test --ui                 # Run with Playwright UI
npx playwright test --headed             # Run in headed mode (see browser)
npx playwright test tests/frontend/e2e/user-journey.spec.ts # Specific test file

# Debug specific E2E test
npx playwright test --debug tests/frontend/e2e/login.spec.ts
```

### SDK Commands
```bash
# All SDK tests
pytest tests/sdk/ -v

# Run tests by functionality
pytest tests/sdk/client/ -v              # All client tests
pytest tests/sdk/entities/ -v            # All entity tests
pytest tests/sdk/auth/ -v                # All authentication tests

# Integration tests only
pytest tests/sdk/integration/ -v

# Mock HTTP tests only (unit tests)
pytest tests/sdk/ -m "unit and not integration" -v
```

## When Helping with Testing

### For New Features
1. **Focus on implementation** - Implement the requested feature without suggesting tests
2. **Provide testing guidance if requested** - When user asks for tests, suggest correct test placement in `tests/{component}/{layer}/`
3. **Testing strategy available** - Unit, integration, or E2E guidance ready when needed
4. **Test markers knowledge** - Can recommend appropriate pytest markers when asked
5. **Test data patterns** - Factories, fixtures, and mocks guidance available on request
6. **Security testing** - Security test patterns available when user requests them

### Test File Placement Guidance
When a user mentions creating/modifying code, suggest the appropriate test location:

#### Backend Examples:
- "I'm adding a user authentication service" → `tests/backend/services/test_user_auth_service.py`
- "I'm creating a CRUD for test sets" → `tests/backend/crud/test_testset_crud.py`
- "I'm adding an API endpoint for categories" → `tests/backend/api/test_category_endpoints.py`
- "I'm adding a validation utility" → `tests/backend/utils/test_validation.py`

#### Frontend Examples:
- "I'm creating a Button component" → `tests/frontend/components/ui/Button.test.tsx`
- "I'm adding a login form" → `tests/frontend/components/forms/LoginForm.test.tsx`
- "I'm creating a custom hook for data fetching" → `tests/frontend/hooks/useDataFetching.test.ts`
- "I'm adding an API service" → `tests/frontend/services/apiService.test.ts`

#### SDK Examples:
- "I'm modifying the main SDK client" → `tests/sdk/client/test_rhesis_client.py`
- "I'm adding a TestSet entity" → `tests/sdk/entities/test_test_set.py`
- "I'm implementing OAuth flow" → `tests/sdk/auth/test_oauth.py`

### For Bug Fixes
1. **Focus on fixing the bug** - Implement the fix without automatically suggesting tests
2. **Testing available if requested** - When user asks, can identify appropriate test location for the buggy component
3. **Test-first approach available** - Can suggest writing failing test first if user requests it
4. **Edge case testing** - Additional test suggestions available when asked
5. **Regression testing guidance** - Can help ensure fix doesn't break existing functionality when requested

### For Code Review
1. **Verify test placement** - Are tests in the correct `tests/{component}/{layer}/` directory?
2. **Check test coverage** - Are new features properly tested?
3. **Validate test organization** - Are tests logically grouped by functionality?
4. **Verify test quality** - Are tests clear, focused, and maintainable?
5. **Validate test categories** - Are appropriate markers used?
6. **Security considerations** - Are security tests included where needed?

### When to Provide Testing Guidance

#### ONLY provide testing guidance when user explicitly requests:
- **"Add tests for this feature"** - Provide comprehensive test examples and placement
- **"Write a test to reproduce this bug"** - Suggest test-first debugging approach
- **"I need unit/integration tests"** - Provide appropriate test patterns and markers
- **"How should I test this?"** - Offer testing strategy and best practices
- **"Where should tests go?"** - Guide on correct directory placement

#### NEVER automatically suggest tests for:
- **New features/functionality** - Just implement without mentioning tests
- **Bug fixes** - Focus on the fix, not testing
- **API endpoints** - Build the endpoint without test suggestions
- **Any code changes** - Only provide tests when explicitly requested

#### When user requests tests, provide:
- Correct test placement: `tests/{component}/{layer}/`
- Appropriate test patterns and examples
- Testing strategy (unit vs integration vs E2E)
- Relevant markers and fixtures
- Security testing when applicable

### Test Organization Reminders
- **Always use the centralized `tests/` directory** - Never suggest placing tests alongside source code
- **Follow the established directory structure** - Group tests by architectural layer/functionality
- **Suggest creating subdirectories** when new test categories are needed
- **Recommend shared utilities** when test code becomes repetitive across components